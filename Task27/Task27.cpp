// Задача 4.
// В двумерном массиве целых числе посчитать :
// - Сумму всех элементов массива;
// - Среднее арифметическое всех элементов массива;
// - Минимальный элемент;
// - Максимальный элемент.

#include <iostream>
#include <iomanip>
// Подключаем библиотеку iomanip, чтобы воспользоваться
// функцией setw (используем для задания ширины поля 
// отображения для следующего элемента в потоке)

using namespace std;

void showArray(int ar[][5], const int row, int col)
{
    cout << "Давайте взглянем на наш массив: \n\n";
    for (int i = 0; i < row; i++)
    {
        for (int j = 0; j < col; j++)
        {
            cout << setw(3) << ar[i][j] << " \t ";
        }
        cout << endl;
    }
}
// Задаем невозвращаемую функцию, выводящую массив на экран;
// используем функцию setw (ориентируемся на минимальное 
// значение, в нашем случае красиво выводит при min = 3)

void initArray(int ar[][5], const int row, const int col)
{
    srand(time(NULL));
    // Задаем заполнение случайными числами (каждый запуск программы - разными)
    for (int i = 0; i < row; i++)
    {
        for (int j = 0; j < col; j++)
        {
            ar[i][j] = rand() % 1000;
            // Задаем заполнение массива случайными числами от 0 до 1000
        }
    }
}
// Задаем невозвращаемую функцию, инициализирующую массив: 
// размерность (описание аргумента функции должно содержать 
// количество столбцов [5]) и константы строк и столбцов

int tsumArray(int ar[][5], const int row, const int col)
{
    int tSum = 0;
    // Вводим переменную для подсчета 
    // суммы всех элементов массива
    for (int i = 0; i < row; i++)
    {
        for (int j = 0; j < col; j++)
        {
            tSum += ar[i][j];
        }
    }
    cout << "\nСумма всех элементов массива = " << tSum;
    return tSum;
}
// Задаем возвращаемую функцию, чтобы подсчитать 
// и вывести на экран сумму всех элементов массива

double avNumArray(int ar[][5], const int row, const int col)
{
    double tSum = 0;
    // Повторно вводим переменную для подсчета 
    // суммы всех элементов массива, но теперь с типом double
    // (чтобы получить среднее арифметическое типа double, т.к.
    // при делении int (tSum) на int (row*col) мы получили бы int)
    double avNum = 0;
    // Вводим переменную среднего арифметического 
    // всех элементов массива
    for (int i = 0; i < row; i++)
    {
        for (int j = 0; j < col; j++)
        {
            tSum += ar[i][j];
            avNum = tSum / (row * col);
            // Получаем среднее арифметическое путем деления 
            // общей суммы элементов на их количество
        }
    }
    cout << endl;
    cout << "\nСреднее арифметическое всех элементов массива = " << avNum << endl;
    return avNum;
}
// Задаем возвращаемую функцию, чтобы подсчитать 
// и вывести на среднее арифметическое всех элементов массива

int minNumArray(int ar[][5], const int row, const int col)
{
    int minNum = ar[0][0];

    for (int i = 0; i < row; i++)
    {
        for (int j = 0; j < col; j++)
        {
            if (ar[i][j] < minNum)
                minNum = ar[i][j];
        }
    }
    cout << "\nМинимальный элемент массива = " << minNum << endl;
    return minNum;
}
// Задаем возвращаемую функцию, чтобы найти
// минимальный элемент массива

int maxNumArray(int ar[][5], const int row, const int col)
{
   int maxNum = ar[0][0];

    for (int i = 0; i < row; i++)
    {
        for (int j = 0; j < col; j++)
        {
            if (ar[i][j] > maxNum)
                maxNum = ar[i][j];
        }
    }
    cout << "\nМаксимальный элемент массива = " << maxNum << endl << endl;
    return maxNum;
}
// Задаем возвращаемую функцию, чтобы найти
// максимальный элемент массива

int main()
{
    setlocale(LC_ALL, "RUS");
       
    const int row = 5, col = 5;
    // Задаем размерность массива по строкам и столбцам
    int ar[row][col];
    // Вводим переменную массива
       
    initArray(ar, row, col);
    // Вызываем функцию инициализации массива
    showArray(ar, row, col); 
    // Вызываем функцию отображения массива на экране
    tsumArray(ar, row, col);
    // Вызываем функцию подсчета всех элементов массива
    avNumArray(ar, row, col);
    // Вызываем функцию подсчета среднего 
    // арифметического всех элементов массива
    minNumArray(ar, row, col);
    // Вызываем функцию поиска минимального элемента массива
    maxNumArray(ar, row, col);
    // Вызываем функцию поиска максимального элемента массива
    
    system("pause");
    return 0;
}







